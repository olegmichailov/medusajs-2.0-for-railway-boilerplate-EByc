/* eslint-disable @typescript-eslint/no-var-requires */
const checkEnvVariables = require("./check-env-variables")
checkEnvVariables()

const getCleanHostname = (url) => {
  if (!url) return null
  try {
    return new URL(url).hostname
  } catch {
    return url.replace(/^https?:\/\//, "").replace(/\/$/, "")
  }
}

const backendHost = getCleanHostname(process.env.NEXT_PUBLIC_MEDUSA_BACKEND_URL)
const minioHost = getCleanHostname(process.env.NEXT_PUBLIC_MINIO_ENDPOINT)

/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,

  // –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ CJS-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (matter-js/poly-decomp) –¥—Ä—É–∂–µ–ª—é–±–Ω–µ–µ –≤ "loose"
  experimental: {
    esmExternals: "loose",
  },

  eslint: {
    ignoreDuringBuilds: true,
  },

  typescript: {
    ignoreBuildErrors: true,
  },

  images: {
    // üí• –æ—Ç–∫–ª—é—á–∞–µ–º Next Image –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é ‚Äî –º–µ–Ω—å—à–µ —Å—é—Ä–ø—Ä–∏–∑–æ–≤ –Ω–∞ –¥–µ–ø–ª–æ–µ
    unoptimized: true,

    formats: ["image/avif", "image/webp"],
    minimumCacheTTL: 600,
    deviceSizes: [360, 640, 768, 1024, 1280, 1440, 1920],

    remotePatterns: [
      { protocol: "http", hostname: "localhost" },
      ...(backendHost ? [{ protocol: "https", hostname: backendHost }] : []),
      ...(minioHost ? [{ protocol: "https", hostname: minioHost }] : []),
      { protocol: "https", hostname: "bucket-production-s43jr0.up.railway.app" },
      { protocol: "https", hostname: "medusa-public-images.s3.eu-west-1.amazonaws.com" },
      { protocol: "https", hostname: "medusa-server-testing.s3.amazonaws.com" },
      { protocol: "https", hostname: "medusa-server-testing.s3.us-east-1.amazonaws.com" },
    ],
  },

  serverRuntimeConfig: {
    port: process.env.PORT || 3000,
  },

  webpack: (config, { isServer }) => {
    // ‚úÖ –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É async WebAssembly –¥–ª—è Rapier (compat)
    config.experiments = {
      ...(config.experiments || {}),
      asyncWebAssembly: true,
      topLevelAwait: true,
    }

    // ‚úÖ –Ø–≤–Ω–æ –≥–æ–≤–æ—Ä–∏–º –≤–µ–±–ø–∞–∫—É, —á—Ç–æ .wasm ‚Äî —ç—Ç–æ –∞—Å—Å–µ—Ç (—á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–æ–∂–∏–ª—Å—è –≤ /_next/static/)
    // (–µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–æ —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º)
    const hasWasmRule = config.module.rules.some(
      (r) => typeof r === "object" && r.test && r.test.toString().includes("\\.wasm$")
    )
    if (!hasWasmRule) {
      config.module.rules.push({
        test: /\.wasm$/,
        type: "asset/resource",
      })
    }

    // ‚úÖ –£—Ä–µ–∑–∞–µ–º node-–ø–æ–ª–∏—Ñ–∏–ª—ã –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –º–æ–¥—É–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ/–∫–ª–∏–µ–Ω—Ç–µ
    config.resolve.fallback = {
      ...config.resolve.fallback,
      // Konva/matter –Ω–µ –¥–æ–ª–∂–Ω—ã —Ç—è–Ω—É—Ç—å node canvas/fs
      canvas: false,
      fs: false,
      path: false,
    }

    // (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç —Å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏ ESM/CJS –ø–∞–∫–µ—Ç–∞–º–∏)
    config.module.parser = {
      ...config.module.parser,
      javascript: {
        ...((config.module.parser && config.module.parser.javascript) || {}),
        exportsPresence: "auto",
      },
    }

    return config
  },
}

module.exports = nextConfig
